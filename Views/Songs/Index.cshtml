@model PaginatedList<SongVM>
@{
    ViewData["Title"] = "Songs";
    string siteUrl = Context.Request.Scheme + System.Uri.SchemeDelimiter + Context.Request.Host.Value;
}

<div class="container m-t-80 p-r-75 p-l-75 bg-white">
    <div class="row">
        <div class="col-9">

            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    Top Lyrics
                </div>
                <div class="card-body p-0">
                    <div class="row1">
                        <div class="col p-0 m-0">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th class="pl-4">#</th>
                                        <th>Song</th>
                                        <th>Artist</th>
                                        <th>Album</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{ var iteration = 0; }
                                    @foreach (var song in Model)
                                    {
                                        <tr>
                                            <th width="7%" class="pl-4" scope="row">@{iteration++;}@iteration</th>
                                            <td><a href="@siteUrl/songs/@song.Slug">@song.Name</a></td>
                                            <td>
                                                @foreach (var artist in song.Artists)
                                                {<a href="@siteUrl/artists/@artist.Slug">@artist.Name</a>}
                                            </td>
                                            <td>@song.Album</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            @{
                                var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                                var nextDisabled = !Model.HasNextPage ? "disabled" : "";
                            }

                            <a asp-action="Index"
                               asp-route-sortOrder="@ViewData["CurrentSort"]"
                               asp-route-pageNumber="@(Model.PageIndex - 1)"
                               asp-route-currentFilter="@ViewData["CurrentFilter"]"
                               class="btn btn-default @prevDisabled">
                                Previous
                            </a>
                            @for (var i = 1; i < Model.GetTotalPages + 1; i++)
                            {<a asp-action="Index"
                               asp-route-sortOrder="@ViewData["CurrentSort"]"
                               asp-route-pageNumber="@i"
                               asp-route-currentFilter="@ViewData["CurrentFilter"]"
                               class="btn btn-default @(Model.PageIndex == i ? "disabled" : "" ) ">
                                @i
                            </a>}
                            <a asp-action="Index"
                               asp-route-sortOrder="@ViewData["CurrentSort"]"
                               asp-route-pageNumber="@(Model.PageIndex + 1)"
                               asp-route-currentFilter="@ViewData["CurrentFilter"]"
                               class="btn btn-default @nextDisabled">
                                Next
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>